const { PermissionsBitField, EmbedBuilder } = require("discord.js");
const WebSocket = require("ws");
const { setData, getData } = require("../../database.js");

const lastSendTimestamps = {}; // Anti-spam per channel

module.exports = {
  config: {
    name: "gagstock",
    description: "Grow A Garden auto-stock every aligned 5-minute interval (Admin only)",
    usage: "-gagstock <on|off|check>",
    cooldown: 5,
    permission: 0,
    aliases: ["gagstocks"]
  },

  ITEM_EMOJI: {
    Carrot: "ü•ï", Strawberry: "üçì", Blueberry: "ü´ê", Tomato: "üçÖ",
    Corn: "üåΩ", Daffodil: "üåº", Watermelon: "üçâ", Pumpkin: "üéÉ",
    Apple: "üçé", Bamboo: "üéã", Coconut: "ü••", Cactus: "üåµ",
    "Dragon Fruit": "üêâ", Mango: "ü•≠", Grape: "üçá", Mushroom: "üçÑ",
    Pepper: "üå∂", Beanstalk: "üå±", "Ember Lily": "üå∫", "Sugar Apple": "üçè",
    "Burning Bud": "üî•", "Giant Pinecone": "üå≤", "Elder Strawberry": "üçì",
    Romanesco: "ü•¶", "Crimson Thorn": "üåπ", "Great Pumpkin": "üéÉ", Potato: "ü•î",
    "Brussels Sprouts": "ü•¨", Cocomango: "ü•≠", Broccoli: "ü•¶", "Orange Tulip": "üå∑",
    "Watering Can": "üåä", "Trading Ticket": "üé´", Trowel: "ü™ì", "Recall Wrench": "üîß",
    "Basic Sprinkler": "üåß", "Advanced Sprinkler": "üí¶", "Godly Sprinkler": "‚ö°",
    "Magnifying Glass": "üîç", "Master Sprinkler": "üèÜ", "Cleaning Spray": "üß¥",
    "Cleansing PetShard": "ü™Ñ", "Favorite Tool": "‚≠ê", "Harvest Tool": "üåæ",
    "Friendship Pot": "ü§ù", "Medium Toy": "üß∏", "Medium Treat": "üç™",
    "Grandmaster Sprinkler": "üåü", "Levelup Lollipop": "üç≠",
    "Common Egg": "ü•ö", "Uncommon Egg": "ü•ö", "Rare Egg": "ü•ö",
    "Legendary Egg": "ü•ö", "Mythical Egg": "ü•ö", "Bug Egg": "üêõ",
    "Exotic Bug Egg": "üêû", "Night Egg": "üåô", "Premium Night Egg": "üåô",
    "Bee Egg": "üêù", "Anti Bee Egg": "üêù", "Premium Anti Bee Egg": "üêù",
    "Common Summer Egg": "üåû", "Rare Summer Egg": "üåû", "Paradise Egg": "ü¶©",
    "Oasis Egg": "üèù", "Dinosaur Egg": "ü¶ñ", "Primal Egg": "ü¶ï",
    "Premium Primal Egg": "ü¶ñ", "Rainbow Premium Primal Egg": "üåàü¶ï",
    "Zen Egg": "üêï", "Gourmet Egg": "üç≥", "Sprout Egg": "üå±",
    "Enchanted Egg": "üßö", "Fall Egg": "üçÇ", "Premium Fall Egg": "üçÇ",
    "Jungle Egg": "üå≥", "Spooky Egg": "üëª"
  },

  getEmoji(name) {
    return this.ITEM_EMOJI[name.replace(/ Seed$/i, "").trim()] || "‚ùî";
  },

  async fetchGAGStock() {
    return new Promise((resolve) => {
      const ws = new WebSocket("wss://ws.growagardenpro.com");
      let resolved = false;

      ws.on("open", () => ws.send(JSON.stringify({ action: "getStock" })));

      ws.on("message", (data) => {
        if (resolved) return;
        resolved = true;

        try {
          const parsed = JSON.parse(data);
          resolve(parsed);
        } catch {
          resolve({});
        } finally {
          ws.close();
        }
      });

      ws.on("error", (err) => {
        console.error("‚ùå [GAG] WebSocket error:", err);
        resolve({});
      });

      ws.on("close", () => {
        if (!resolved) resolve({});
      });
    });
  },

  async sendStock(client, channelId, items) {
    const now = Date.now();
    const lastSent = lastSendTimestamps[channelId] || 0;
    if (now - lastSent < 5000) return; // 5-second per-channel cooldown
    lastSendTimestamps[channelId] = now;

    const channel = await client.channels.fetch(channelId).catch(() => null);
    if (!channel) return;

    const description = ["Seeds", "Gear", "Eggs"]
      .map((cat) => {
        const arr = items.filter((i) => 
          cat === "Seeds" ? i.type === "seed" :
          cat === "Gear" ? i.type === "gear" :
          cat === "Eggs" ? i.type === "egg" : false
        );
        return `**${cat}**\n${arr.map((i) => `‚Ä¢ ${this.getEmoji(i.name)} **${i.name}** (${i.quantity})`).join("\n") || "‚ùå Empty"}`;
      })
      .join("\n\n");

    const embed = new EmbedBuilder()
      .setTitle("ü™¥ Grow A Garden Stock Update")
      .setDescription(description.slice(0, 4096))
      .setColor(0xff0080)
      .setTimestamp();

    await channel.send({ embeds: [embed] });
  },

  async letStart(ctx) {
    const args = ctx.args;
    const message = ctx.message;
    const discord = ctx.discord;
    const client = discord.client;

    if (!message.member.permissions.has(PermissionsBitField.Flags.Administrator))
      return message.reply("üö´ Only Admins can use this command.");

    const action = args[0]?.toLowerCase();
    if (!["on", "off", "check"].includes(action))
      return message.reply("‚ö†Ô∏è Invalid action! Use `on`, `off`, or `check`.");

    const guildId = message.guild.id;
    const channelId = message.channel.id;
    const allData = (await getData("gagstock/discord")) || {};
    let gcData = allData[guildId];
    if (!gcData || !Array.isArray(gcData.channels))
      gcData = { enabled: false, channels: [] };

    if (action === "on") {
      if (!gcData.channels.includes(channelId)) gcData.channels.push(channelId);
      gcData.enabled = true;
      allData[guildId] = gcData;
      await setData("gagstock/discord", allData);
      return message.reply("‚úÖ GAG Auto-stock **enabled** for this channel!");
    }

    if (action === "off") {
      gcData.channels = gcData.channels.filter((id) => id !== channelId);
      if (gcData.channels.length === 0) gcData.enabled = false;
      allData[guildId] = gcData;
      await setData("gagstock/discord", allData);
      return message.reply("üõë GAG Auto-stock **disabled** for this channel!");
    }

    if (action === "check") {
      const status = gcData.enabled ? "‚úÖ Enabled" : "‚ùå Disabled";
      const channels = gcData.channels.map((id) => `<#${id}>`).join(", ") || "None";
      return message.reply(`üìä Status: ${status}\nChannels: ${channels}`);
    }
  },

  async checkForUpdate(client) {
    try {
      const stockData = await this.fetchGAGStock();
      const currentUpdate = stockData?.data?.lastGlobalUpdate;
      if (!currentUpdate) return;

      // Only send if there's a new global update
      const lastSaved = await getData("gagstock/lastGlobalUpdate") || null;
      if (currentUpdate === lastSaved) return;

      await setData("gagstock/lastGlobalUpdate", currentUpdate);
      console.log(`‚úÖ [GAG] Stock updated at ${new Date().toLocaleTimeString()}`);

      const allData = (await getData("gagstock/discord")) || {};
      for (const guildId in allData) {
        const gcData = allData[guildId];
        if (!gcData?.enabled || !Array.isArray(gcData.channels)) continue;

        const items = [
          ...(stockData.data.seeds || []),
          ...(stockData.data.gear || []),
          ...(stockData.data.events || []),
          ...(stockData.data.honey || []),
          ...(stockData.data.eggs || [])
        ].filter((i) => ["seed", "gear", "egg"].includes(i.type));

        if (items.length === 0) continue;

        for (const chId of gcData.channels) {
          await this.sendStock(client, chId, items);
        }
      }
    } catch (err) {
      console.error("‚ùå [GAG] checkForUpdate error:", err);
    }
  }
};